7月22日	DirectX11の習得を開始
8月1日	DirectX11の学習終了
		FBX SDKの学習を開始
8月13日	FBX SDKの学習終了
		DirectX11でFBXのモデルを描画する試作品の開発を開始
8月18日	Google Driveでフルバックアップ管理していたプロジェクトをGithubへ移行
		DirectX11でFBXのモデルを描画する試作品の完成(ジオメトリのみ)
		完成に伴いFBXSDKの機能のラッピングを開始
8月20日 	FBXフォーマットモデルのアニメーション機能を追加(計算の最適化が必要)
8月21~22日	FBXのマテリアル情報、法線、UVそれぞれの取得に対応
			メモリリークへの対応
8月26日	CEDECにてAIプランニング技術を学習
		ゲームシステムの考案(現在開発中のStruggleの原案)
8月30日	一つのFBXに対して複数のメッシュ情報に対応
		不要なコードの削除・可読性の最適化
8月31日	FBXの読み込み機能と描画機能をそれぞれ別クラスとして独立化。それに伴いDirectX11の描画機能をラッピング
		テクスチャの読み込みに対応
		不要なメソッドの削除
		FBXにある複数のアニメーションの切り替えに対応
		シェーダ機能を拡張可能なクラスとして独立化・
		FBXとは別の描画に必要な情報(座標・拡大率・回転)をFBX描画クラスから独立化
		描画機能をFBX描画クラスから完全に独立した描画クラスの実装
		FBX関係のクラスから描画機能を削除
9月1日 	D3DXのベクトル・行列処理をラッピング
		DirectX11の機能を一部ラッピング
9月2日 	メモリリークの修正
9月6日 	テクスチャ機能を使いやすくしたラッパーの作成
		それに伴いFBXラッパーのテクスチャ読み込み機能を修正
9月8日 	シェーダに関する問題点(開放忘れなどのヒューマンエラー)を防ぐために、
		シェーダ管理クラスを改善・HLSLとのデータの扱いを改善
		拡張前提のスプライトクラスの開発
		上記スプライトクラスを拡張した2Dスプライトクラスの実装
9月9日 	言語機能をC++03からC++14に試験的に移行。作業が著しく滞るような重大な問題がない限りこのまま開発を続ける。
		それに伴いnew/deleteを用いた動的メモリ操作処理を削減することを目標とする
		FBXから読み出した3Dモデルの頂点情報などをFBX読み込みクラスから分離し、
		同じモデルを複数のインスタンスで独立して扱えるようにFBX管理クラスに頂点情報などを持たせるように仕様変更
9月10日 ポインタをスマートポインタに移行
		1クラス1ファイルを基本とするようにファイル構成を大きく変更
		Cocos2d-xやUnityにあるようなシーンの概念を実装
		それに伴い部分的にCocos2d-xのような書き方(InitやUpdate等の継承)をすることができるように変更
		それに伴いDirectX11の機能を(一応直接扱うことは可能だが)大幅にラッピング、小規模なフレームワーク化。
9月12日	キーイベントを独立してイベントプロシージャのような記述が可能な仕様を追加。
		従来通りのゲームループにキー入力処理を書く事も可能
9月13日 	境界球判定を行うクラスを実装
9月14日 	境界球判定クラスをFBX管理クラスに対応
		カメラの中央から発生するレイ(直線)との交差処理を実装
9月19日 	レイ(直線)との交差判定に存在したバグの修正
9月20日 	レイ(線分)とメッシュとの交差判定(レイピッキング)を実装
9月21日	レイピッキング処理の設計ミスにより再実装
		ビュー行列ラッパークラスの機能追加
9月22日	視錐台カリングを実装
		レイピッキング処理を改善
9月23日	オクルージョンカリングを実装
10月3日	追従処理を追加
		簡易サンプルソースの追加
10月4日	ダイクストラ法を用いた経路探索の試作品を実装
10月7日	経路探索システムにランダム捜索を実装
		FBXモデル管理機能を改善。
			内約：アニメーションの最適化
				バッファの最適化
				コリジョンの最適化	
10月8日	ゲーム画面に存在する全ての3Dオブジェクトに共通するGameObjectを実装
		ゲーム画面に存在する全てのキャラクタに共通するCharacterBaseを実装(GameObjectを継承)
		ゲーム画面に存在するプレイヤー、敵のクラスとしてそれぞれPlayer,Enemyを実装(CharacterBaseを継承)
		ゲーム画面に存在する全ての静的オブジェクトに共通するStaticObjectを実装(GameObjectを継承)
		遠距離攻撃を実装
		スマートポインタの扱いを一部改善
		敵となるオブジェクトのクラスを実装
		HTNプランニングを用いたAIの試作品の実装
			実装にはLuaを採用
		C++にLuaを組み込むヘルパーライブラリの開発
10月9日	遠距離攻撃に衝突機能を追加
10月12日	AI機能を強化
		アイテム追従機能を追加
10月13日	敵が上手くアイテムを追従できなかったバグを修正
10月14日	衝突判定の高速化
		それに伴うローポリゴンコリジョンモデルの追加
10月16日	プログレスゲージの実装
10月17日	ランダムリスポーンの実装
		生死の概念(リスポーンに必要)を追加
		遠距離攻撃に攻撃力・ダメージパターンを追加
		敵も遠距離攻撃ができるように修正
10月22日	TGAフォーマットの読み込みに対応
10月23日	TGAフォーマットの読み込み機能を独立させ、ライブラリ化
10月24日	Effekseerの組み込み。それに伴いラッパーライブラリを開発
10月27日	AIノードマップをインポートするライブラリの開発
10月31日	アニメーション切り替え機能を使いやすくするために改善
11月1日	AIを本番用に拡張しやすい形に再設計
11月2日	Effekseer導入に伴うメモリリークを修正
		カリングに使用するモデルを小衝突判定専用のローポリゴンモデルに変更
11月9日	複数 対 複数　ができるAIの開発完了。
		それに伴いプレイヤー抜きでゲームが成り立つように。
11月17日	プロジェクトが大きくなってきたことに伴いプロジェクトを細分化。
			内約(既に細分化しているものも含む)：
				ゲーム本体
				AIマップ読み込み機能
				スポーンマップ読み込み機能
				FBX読み込み機能
				2Dテクスチャ読み込み・管理機能
				TGAフォーマット読み込み機能
				D3DXの算術機能のラッパー
				LuaをC++(C++11以降)に組み込むヘルパー
11月19日	親子関係を持つ拡張可能なUIオブジェクトクラスを作成
11月20日	スコアゲージUIの追加
		テキスト描画システムの開発を開始
11月21日	テキスト用のテクスチャ作成機能を作成
		テキスト描画の試作品を開発
11月23日	テキスト描画のバグを特定
11月24日	テキスト描画バグを修正
		テキストを管理するマネージャの開発
11月25日	UI組み込み開始
		遠距離攻撃(以下バレット)のマネージャの実装を開始
11月27日	バレットマネージャの開発完了
11月28日	キャッシュ機能を追加し、3Dモデルのアニメーションを最適化。
		レイアウト等の設定情報を外部ファイル化
		プログラム関係ファイル、リソースファイルを整理。
		それに伴いソリューション名を一新。
12月3日	タイトル画面の設計
12月5日	UIリソースファイルを追加
		リザルト画面の開発
12月10日	簡易Audioライブラリの開発(waveフォーマットのみ対応)
12月12日	ステージ選択画面を実装
		それに伴いステージ選択用データを作成
12月13日	BGM・SEリソースを追加
		簡易AudioライブラリをDirectXAudioLibraryと名前を変更し、
		ゲーム本体に組み込み
12月16日	COMを標準使用できるように改善
		ループ再生に対応
		ドキュメントの製作を開始(bootstrapを採用
		Tweenライブラリを導入
		タイトルシーンの画面遷移にマルチスレッド対応
		それに伴いシーンの初期化フラグを追加
		AIの開始・停止に対応
		ゲーム開始前ロゴの追加
		各シーンにサウンドを組み込み
		バレットに日衝突オブジェクトを認識できる機能を追加
		リアクション(モーション)の切り替えを適切な箇所に追加
		処理速度改善目的で一時的に敵の処理を削減
		モーションを自動で切り替える機能を追加
		ゲーム開始前のインターバル画面を追加
		拠点のデザインを変更